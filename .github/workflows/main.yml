name: CI/CD of containers with GitHub Actions

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
  push:
    branches: [master]
  pull_request:
    branches: [master]

env:
  resourcegroup: mcwworkshoprg
  containerregistry: mcwworkshop.azurecr.io
  registryusername: mcwworkshop
  imagename: mcwworkshop.azurecr.io/tailspintoys/web
  
# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      - uses: azure/docker-login@v1
        with:
          login-server: ${{ env.containerregistry }}
          username: ${{ env.registryusername }}
          password: ${{ secrets.REGISTRY_PASSWORD }}

      - run: |
          docker build . -t ${{ env.imagename }}:${{ github.sha }}
          docker push ${{ env.imagename }}:${{ github.sha }}

      - name: Upload arm templates to workflow
        uses: actions/upload-artifact@v2
        with:
          name: armtemplate
          path: ${{ github.workspace }}/armtemplate/

  deploy-dev:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Download armtemplate
        uses: actions/download-artifact@v2
        with:
          name: armtemplate

      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Deploy ARM template
        run: |
          $output = az deployment group create --resource-group ${{ env.resourcegroup }} --template-file azuredeploy.json --parameters environment=dev --parameters administratorLogin=JallaJalla --parameters administratorLoginPassword=${{ secrets.DBPASSWORD }}
          $armOutputObj = $output | ConvertFrom-Json
          $webAppName = $armOutputObj.properties.outputs.webappname.value
          echo "::set-env name=webAppName::$webAppName"
        shell: pwsh

      - name: Deploy webapp to staging slot
        uses: azure/CLI@v1
        with:
          inlineScript: |
            az webapp config container set \
                        --resource-group ${{ env.resourcegroup }} \
                        --name ${{ env.webAppName }} \
                        --docker-custom-image-name ${{ env.imagename }}:${{ github.sha }} \
                        --docker-registry-server-password ${{ secrets.REGISTRY_PASSWORD }} \
                        --docker-registry-server-url https://${{ env.containerregistry }} \
                        --docker-registry-server-user ${{ env.registryusername }} \
                        --slot staging

      - name: Swap slots for webapp
        uses: azure/CLI@v1
        with:
          inlineScript: |
            az webapp deployment slot swap -g ${{ env.resourcegroup }} -n ${{ env.webAppName }} --slot staging --target-slot production

  deploy-test:
    runs-on: ubuntu-latest
    needs: deploy-dev
    steps:
      - name: Download armtemplate
        uses: actions/download-artifact@v2
        with:
          name: armtemplate

      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - run: |
          $output = az deployment group create --resource-group ${{ env.resourcegroup }} --template-file azuredeploy.json --parameters environment=test --parameters administratorLogin=JallaJalla --parameters administratorLoginPassword=${{ secrets.DBPASSWORD }}
          $armOutputObj = $output | ConvertFrom-Json
          $webAppName = $armOutputObj.properties.outputs.webappname.value
          az webapp config container set `
                        --resource-group ${{ env.resourcegroup }} `
                        --name $webappname `
                        --docker-custom-image-name ${{ env.imagename }}:${{ github.sha }} `
                        --docker-registry-server-password ${{ secrets.REGISTRY_PASSWORD }} `
                        --docker-registry-server-url https://${{ env.containerregistry }} `
                        --docker-registry-server-user ${{ env.registryusername }} `
                        --slot staging
          echo "::set-env name=webAppName::$webAppName"
        shell: pwsh

      - name: Swap slots for webapp
        uses: azure/CLI@v1
        with:
          inlineScript: |
            az webapp deployment slot swap -g ${{ env.resourcegroup }} -n ${{ env.webAppName }} --slot staging --target-slot production
  
  deploy-prod:
    runs-on: ubuntu-latest
    needs: deploy-test
    steps:
      - name: Download armtemplate
        uses: actions/download-artifact@v2
        with:
          name: armtemplate

      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - run: |
          $output = az deployment group create --resource-group ${{ env.resourcegroup }} --template-file azuredeploy.json --parameters environment=production --parameters administratorLogin=JallaJalla --parameters administratorLoginPassword=${{ secrets.DBPASSWORD }}
          $armOutputObj = $output | ConvertFrom-Json
          $webAppName = $armOutputObj.properties.outputs.webappname.value
          az webapp config container set `
                        --resource-group ${{ env.resourcegroup }} `
                        --name $webappname `
                        --docker-custom-image-name ${{ env.imagename }}:${{ github.sha }} `
                        --docker-registry-server-password ${{ secrets.REGISTRY_PASSWORD }} `
                        --docker-registry-server-url https://${{ env.containerregistry }} `
                        --docker-registry-server-user ${{ env.registryusername }} `
                        --slot staging
          echo "::set-env name=webAppName::$webAppName"
        shell: pwsh

      - name: Swap slots for webapp
        uses: azure/CLI@v1
        with:
          inlineScript: |
            az webapp deployment slot swap -g ${{ env.resourcegroup }} -n ${{ env.webAppName }} --slot staging --target-slot production            
